{"version":3,"sources":["editor.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","useState","open","setOpen","className","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","line","mode","theme","lineNumbers","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","useEffect","timeout","setTimeout","clearTimeout","title","sandbox","frameBorders","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RA8DeA,MAnDf,SAAgBC,GAEhB,IAECC,EAKGD,EALHC,SACAC,EAIGF,EAJHE,YACAC,EAGGH,EAHHG,MACAC,EAEGJ,EAFHI,SAID,EAAsBC,oBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KAMC,OAEE,sBAAKC,UAAS,2BAAsBF,EAAO,GAAK,aAAhD,UACK,sBAAKE,UAAU,eAAf,UAECN,EAED,wBACCO,QAAU,kBAAKF,GAAQ,SAAAG,GAAQ,OAAKA,MADrC,SAIC,cAAC,IAAD,CAAiBC,KAAML,EAAOM,IAAgBC,WAK/C,cAAC,aAAD,CAAkBC,eApB1B,SAAsBC,EAAOC,EAAKb,GAChCC,EAASD,IAoBHA,MAAOA,EACPK,UAAU,sBACVS,QAAS,CAETC,cAAa,EACbC,MAAM,EACNC,KAAMnB,EACNoB,MAAO,WACPC,aAAa,S,MCsBNC,MApEf,WAEA,MAAuBlB,mBAAS,IAAhC,mBAAOmB,EAAP,KAAYC,EAAZ,KACA,EAAqBpB,mBAAS,IAA9B,mBAAOqB,EAAP,KAAWC,EAAX,KACA,EAAmBtB,mBAAS,IAA5B,mBAAOuB,EAAP,KAAUC,EAAV,KACA,EAA2BxB,mBAAS,IAApC,mBAAOyB,EAAP,KAAcC,EAAd,KA8BE,OA5BFC,qBAAU,WAER,IAAMC,EAAUC,YAAW,WAE3BH,EAAU,+BAAD,OAGGP,EAHH,kCAIIE,EAJJ,oCAKKE,EALL,uCAYP,KAIF,OAAO,kBAAMO,aAAaF,MAG1B,CAACT,EAAKE,EAAIE,IAOT,qCAEG,sBAAKpB,UAAU,gBAAf,UACE,cAAC,EAAD,CAAQP,SAAS,MAAMC,YAAY,OAAOC,MAAOqB,EAAMpB,SAAUqB,IACjE,cAAC,EAAD,CAAQxB,SAAS,MAAMC,YAAY,MAAMC,MAAOuB,EAAKtB,SAAUuB,IAC/D,cAAC,EAAD,CAAQ1B,SAAS,aAAaC,YAAY,KAAKC,MAAOyB,EAAIxB,SAAUyB,OAIxE,qBAAKrB,UAAU,OAAf,SACI,wBACEsB,OAAQA,EACRM,MAAM,SACNC,QAAQ,gBACRC,aAAa,IACbC,MAAM,OACNC,OAAO,eChDFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0c4ac7d8.chunk.js","sourcesContent":["import React,{ useState } from 'react'\r\nimport CodeMirror from 'codemirror'\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/material.css\";\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport \"codemirror/mode/css/css\"\r\nimport { Controlled  as ControlledEditor } from 'react-codemirror2'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCompressAlt,faExpandAlt } from '@fortawesome/free-solid-svg-icons' \r\n\r\nfunction Editor(props) {\r\n \r\nconst{\r\n\r\n language,\r\n displayName,\r\n value,\r\n onChange\r\n\r\n} = props\r\n\r\nconst [open,setOpen] =useState(true)\r\n\r\nfunction handleChange(editor,data,value){\r\n  onChange(value)\r\n}\r\n\r\n return (\r\n   \r\n   <div className={`editor-container ${open ? '' : 'collapsed'}`}>\r\n        <div className=\"editor-title\">\r\n\r\n        {displayName}\r\n\r\n        <button\r\n         onClick={ ()=> setOpen(prevOpen => !prevOpen)}   \r\n         >\r\n     \r\n         <FontAwesomeIcon icon={open ? faCompressAlt : faExpandAlt} />\r\n         </button>\r\n        \r\n        </div> \r\n \r\n        <ControlledEditor onBeforeChange={handleChange}\r\n        value={value}\r\n        className=\"code-mirror-wrapper\"\r\n        options={{\r\n\r\n        lineWrapping:true,\r\n        line: true,\r\n        mode: language,\r\n        theme: 'material',\r\n        lineNumbers: true\r\n        }}\r\n\r\n        />\r\n   </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Editor;","import React,{ useState,useEffect} from 'react';\r\n// if want to use JSX\r\nimport Editor from './editor.js';\r\nimport './App.css';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\nconst [html,setHtml] = useState('')\r\nconst [css,setCss] = useState('')\r\nconst [js,setJs] = useState('')\r\nconst [srcDoc,setSrcDoc] = useState('')\r\n\r\nuseEffect(() => {\r\n\r\n  const timeout = setTimeout(() =>{\r\n  \r\n  setSrcDoc(\r\n        `  <html>\r\n    \r\n     <body> ${html} </body>\r\n     <style> ${css} </style>\r\n     <script> ${js} </script>\r\n\r\n  </html>\r\n  \r\n  `\r\n    )\r\n\r\n  },250\r\n    )\r\n\r\n\r\n  return () => clearTimeout(timeout)\r\n \r\n\r\n},[html,css,js]\r\n\r\n  )\r\n\r\n\r\n  return (\r\n\r\n   <>\r\n\r\n      <div className=\"pane top-pane\">\r\n        <Editor language=\"xml\" displayName=\"HTML\" value={html} onChange={setHtml} /*HTML code editor*//>  \r\n        <Editor language=\"css\" displayName=\"CSS\" value={css} onChange={setCss}    /*CSS code editor*//>\r\n        <Editor language=\"javascript\" displayName=\"JS\" value={js} onChange={setJs}/*JS code editor*//>\r\n      </div>   \r\n\r\n\r\n    <div className=\"pane\"> \r\n        <iframe     \r\n          srcDoc={srcDoc}                                                                          /* Specifies the HTML content of the page to show in the <iframe>*/\r\n          title=\"output\" \r\n          sandbox=\"allow-scripts\" \r\n          frameBorders=\"0\"  \r\n          width=\"100%\"       \r\n          height=\"100%\"\r\n  \r\n        ></iframe>\r\n    </div>\r\n\r\n  </> \r\n\r\n    \r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}